class in pack1 used till P
/**
-Do not use tabs while giving indentation.
*/
Array:
-only one type of data type can be stored.
-Array size is fixed, we cannot modify further.
-No built-in methods.
-First element is the reference to the rest of the element, thats why Array index starting from 0.

Collection api :
collection of elements , group of elements, managing collection of elements.

List :
-It maintains the order of the elements in which they were added.
-Its built on top Array. Internally it uses index numbers, we need not mention explicitly.

Queue :
-FIFO

Set :
-While managing multiple elements it won't allow duplicates.

Map :
-Every elements mapping with a key.
-Also called key-value pair.
-It is not a extending to collection but it is also part of collection framework.

class ArrayList{
	public Boolean add(Object obj){}
	public Object get(int index){}
	public Boolean remove(Object index){}
	public Object remove(int index){}
}

Array list methods :

1. boolean add(): adds elements upcasted to Object type and return boolean result
2. set(int index, Object obj): replaces elements in a specified position
3. boolean remove(int i) : removes element for the passed index if int is greater than object length than gives error
   boolean remove(Object i) : removes object, if present returns true if not returns false.
4. boolean removeAll(ArrayList list) : removes the element in the list that are present in the passed list and return true if none removed else false.
5. void removeRange(int i, int j) : protected member of ArrayList, removes elements form index i, till index j-1 since j is exclusive. 
6. boolean retainAll(ArrayList list) : retains all the elements that matches in the passed list and deletes the rest.
7. int size() : Returns the number of elements present int the ArrayList.
8. contains() : checks whether specified element is there or not, if present returns true, if not false.


length : Available in the arrays, tells size of the array through this property.
length() : Available in string, to know total numbers of characters in the string.
size(): Available in the Collection api, to know the number of elements in collection object.  


-@Thread does not implement comparable interface

Iterator interface methods :
public interface java.util.Iterator<E> {
					public abstract boolean hasNext();
					public abstract E next();
					public default void remove();
					public default void forEachRemaining(java.util.function.Consumer<? super E>);
		   }
		  
		  
ListIterator interface methods :
public interface java.util.ListIterator<E> extends java.util.Iterator<E> {
  public abstract boolean hasNext(); : checks for the next element if none return false else true
  public abstract E next(); : returns the next element if none returns noSuchElementError
  public abstract boolean hasPrevious(); : checks for the previous element if none return false else true
  public abstract E previous(); : returns the previous element if none throws  noSuchElementError
  public abstract int nextIndex(); : returns the next index if none returns -1
  public abstract int previousIndex(); : returns the previous index if none returns -1
  public abstract void remove(); : remove at the pointer
  public abstract void set(E); : replacing is done at the pointer
  public abstract void add(E); : adding is done left to the nextIndex of the pointer.
}


                                                                     COLLECTION
														
			List                                        Queue                                   Set                                          Map
(All are implementing List interface)           (All are implementing Queue interface)   (All are implementing Set interface)
			1. ArrayList(I)                             1. LinkedList(I)                        1. HashSet(I)
			2. Vector(I)                                2. PriorityQueue(I)                     2. LinkedHashSet(I)
				-synchronized                          		-Auto sorting through head          3.0. SortedSet
				-advisable in multiple threads                                                		3.1. NavigableSet
			3. LinkedList(I)                                                                   		3.2. TreeSet(I)

**
*(I) - it implements.

Queue:
-Has no index unlike List.

LinkedList:
-LinkedList displays dual feature List(has index) and Queue.


ArrayList :                                                                     Linked list :
-Reading(Random access) operation is very fast, since its uses contiguous       -Elements are scattered in the memory, takes more time to access a element. 
memory locations.
-Insert and Remove is not effective.                                            -Insert and Remove is most effective.
-Only implements List.                                                          -Implements List and Queue.


Set :
-Has no index, cannot read one particular element.
-Main feature is to avoid duplicates.
-Random order


HashSet :
-only avoids duplicates

public class java.util.HashSet<E> extends java.util.AbstractSet<E> implements java.util.Set<E>, java.lang.Cloneable, java.io.Serializable {
  static final long serialVersionUID;
  public java.util.HashSet();
  public java.util.HashSet(java.util.Collection<? extends E>);
  public java.util.HashSet(int, float);
  public java.util.HashSet(int);
  java.util.HashSet(int, float, boolean);
  public java.util.Iterator<E> iterator();
  public int size();
  public boolean isEmpty();
  public boolean contains(java.lang.Object);
  public boolean add(E); : adds the element, if no duplicates returns true otherwise returns false.
  public boolean remove(java.lang.Object);
  public void clear();
  public java.lang.Object clone();
  public java.util.Spliterator<E> spliterator();
  public java.lang.Object[] toArray();
  public <T> T[] toArray(T[]);
  public static <T> java.util.HashSet<T> newHashSet(int);
  static {};
}


LinkedHashSet : 
-avoids duplicates and maintains the input order.

public class java.util.LinkedHashSet<E> extends java.util.HashSet<E> implements java.util.Set<E>, java.lang.Cloneable, java.io.Serializable {
  public java.util.LinkedHashSet(int, float);
  public java.util.LinkedHashSet(int);
  public java.util.LinkedHashSet();
  public java.util.LinkedHashSet(java.util.Collection<? extends E>);
  public java.util.Spliterator<E> spliterator();
  public static <T> java.util.LinkedHashSet<T> newLinkedHashSet(int);
}


TreeSet:
-avoids duplicates and maintains the sorting order.

public class java.util.TreeSet<E> extends java.util.AbstractSet<E> implements java.util.NavigableSet<E>, java.lang.Cloneable, java.io.Serializable {
  java.util.TreeSet(java.util.NavigableMap<E, java.lang.Object>);
  public java.util.TreeSet();
  public java.util.TreeSet(java.util.Comparator<? super E>);
  public java.util.TreeSet(java.util.Collection<? extends E>);
  public java.util.TreeSet(java.util.SortedSet<E>);
  public java.util.Iterator<E> iterator();
  public java.util.Iterator<E> descendingIterator();
  public java.util.NavigableSet<E> descendingSet();
  public int size();
  public boolean isEmpty();
  public boolean contains(java.lang.Object);
  public boolean add(E);
  public boolean remove(java.lang.Object);
  public void clear();
  public boolean addAll(java.util.Collection<? extends E>);
  public java.util.NavigableSet<E> subSet(E, boolean, E, boolean);
  public java.util.NavigableSet<E> headSet(E, boolean);
  public java.util.NavigableSet<E> tailSet(E, boolean);
  public java.util.SortedSet<E> subSet(E, E);
  public java.util.SortedSet<E> headSet(E);
  public java.util.SortedSet<E> tailSet(E);
  public java.util.Comparator<? super E> comparator();
  public E first();
  public E last();
  public E lower(E);
  public E floor(E);
  public E ceiling(E);
  public E higher(E);
  public E pollFirst();
  public E pollLast();
  public java.lang.Object clone();
  public java.util.Spliterator<E> spliterator();
  static {};
}


Object class :
-hashCode() and equals() methods are used to identify duplicates.
-Object class hashCode and equals return integer form of memory representation.
-These methods are overrided in Set stream and String and Wrapper classes.


public class java.lang.Object {
  public java.lang.Object();
  public final native java.lang.Class<?> getClass();
  public native int hashCode(); : It returns integer form of the memory representation of the object. 
  public boolean equals(java.lang.Object);
  protected native java.lang.Object clone() throws java.lang.CloneNotSupportedException;
  public java.lang.String toString();
  public final native void notify();
  public final native void notifyAll();
  public final void wait() throws java.lang.InterruptedException;
  public final void wait(long) throws java.lang.InterruptedException;
  public final void wait(long, int) throws java.lang.InterruptedException;
  protected void finalize() throws java.lang.Throwable;
}


HahsCode & equals: 
-Only for inequality.
-If two objects have same hash code, objects may or may not be equal.
-Then it class equals() to check equality, which is 100% accurate.
-hashCode() is faster than equals(), Thats why hashCode() is called first.If same go for equals().