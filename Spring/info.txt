what is application?
User level:
    -Standalone application - if we install we can use it, if you have it you can use it.
    -web application - Internet(to connect to server) and server and user --web application.
Enterprise level:
    -enterprise application - 

java program - 

web application :
    we need server - deploy in server - port number - ip-localhost

Framework:
    -Framework is the body or platfrom of predefined codes, which are used to develop application.
    -some one will give all raw material at once - ready to use

Spring:
    light weight
    opensource
    Framework of Frameworks

Modules:
IOC(Inversion of control)
AOP
DAO
ORM
WEB/web MVC

IOC: (helps in creating objects(Dependency) which are required for starting the project)
    class person{
        Address address;
        String name;
        int age;
        Person(Address address){
            this.address = address;
        }
    }
    class Address{
        String streetName;
        String doorNo;
        String state;
        String pincode;
    }
its called DI(Dependency Injection)
person -- address --reference for person


IOC makes code loosely coupled, i.e no need to modify the code if our logic move to new environment.

predefined template:
template: a form mold or pattern used as a guide to make something

light wieght:
    spring framework doesn't force the programmer to inherit any class or implement any interface
    ready to use
    light wieght  - data transfomration is easy using POJO (setter and getter methods)
fast development
modules for every need of application

IOC : is a module container and called as core of spring framework.
    -resposible for instantiates the objects
    -for configurations
    -assemble the objects and manage the objects life cycles.
    -managing the Dependencies.
    spring container(IOC) uses Dependency Injection container to manage all other responsibilities

Dependecy Injection:
class A{
    B b;
    B getB(){
    b = new B();
    return b;
    }
}
class B{
    C c;
    C getC(){
        return new C();
    }
}

Object as a Bean.
Beans managed by container

define this Dependecy:
Two types:
1. setter Dependecy Injection : 
    DI will be injected with the help of setter and getter methods
    set the DI as a setter injection in the Bean
    class A{
        B b;
        test(){
        ...
        s.o.p(b.getName());
        ...
        ...
        }
        void setB(B b){
            this.b = b;
        }
    }
    class test{
        main(){
            A.setB(new B());
            A.test();
        }
    }

2. constructor Dependecy Injection
    with the help of constructor we will inject the Dependencies
    class A{
        B b;
        A(B b){
            this.b = b;
        }
    }
by jyothsna
-------------------------------------------------
-------------------------------------------------


Spring main motto : Inversion of control (maintaining lifetime of an object)